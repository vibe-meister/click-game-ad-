// Idle Clicker Prototype (React) with Advanced UI
// Features added:
// - Email login system (stubbed, stores locally)
// - Local leaderboard simulation (shows top players and logged-in player)
// - HD SVG tappable asset (coin with sparkle)
// - Prestige visual evolution (bronze, silver, gold, diamond)
// - Shop, ads, prestige, rewarded ad still intact

import React, { useEffect, useState, useRef } from 'react';

function formatNumber(n) {
  if (n < 1000) return n.toString();
  const units = ['K','M','B','T','Qa','Qi'];
  let i = -1;
  let num = n;
  while (num >= 1000 && i < units.length - 1) {
    num /= 1000;
    i += 1;
  }
  return num.toFixed(num < 10 ? 2 : 1) + units[i];
}

export default function IdleClickerAdvanced() {
  const [coins, setCoins] = useState(0);
  const [tapPower, setTapPower] = useState(1);
  const [autoPerSec, setAutoPerSec] = useState(0);
  const [multiplier, setMultiplier] = useState(1);
  const [prestigePts, setPrestigePts] = useState(0);
  const [noAds, setNoAds] = useState(false);
  const [doubleUntil, setDoubleUntil] = useState(0);
  const [lastTick, setLastTick] = useState(Date.now());
  const [particles, setParticles] = useState([]);
  const [userEmail, setUserEmail] = useState("");
  const [loggedIn, setLoggedIn] = useState(false);
  const [leaderboard, setLeaderboard] = useState([]);
  const tickRef = useRef(null);

  const shop = [
    { id: 'tap_up', name: 'Tap Power +1', baseCost: 10, effect: () => setTapPower(p => p + 1) },
    { id: 'auto_1', name: 'Auto Clicker', baseCost: 50, effect: () => setAutoPerSec(p => p + 1) },
    { id: 'mult_x2', name: 'Multiplier x2', baseCost: 500, effect: () => setMultiplier(m => m * 2) },
  ];

  // Load saved data
  useEffect(() => {
    const raw = localStorage.getItem('idle_proto_v2');
    if (raw) {
      try {
        const s = JSON.parse(raw);
        setCoins(s.coins || 0);
        setTapPower(s.tapPower || 1);
        setAutoPerSec(s.autoPerSec || 0);
        setMultiplier(s.multiplier || 1);
        setPrestigePts(s.prestigePts || 0);
        setNoAds(!!s.noAds);
        if (s.email) { setUserEmail(s.email); setLoggedIn(true); }
      } catch(e){}
    }
  }, []);
  useEffect(() => {
    const to = setInterval(() => {
      const state = { coins, tapPower, autoPerSec, multiplier, prestigePts, noAds, email: userEmail };
      localStorage.setItem('idle_proto_v2', JSON.stringify(state));
    }, 5000);
    return () => clearInterval(to);
  }, [coins, tapPower, autoPerSec, multiplier, prestigePts, noAds, userEmail]);

  // Income tick
  useEffect(() => {
    tickRef.current = setInterval(() => {
      const now = Date.now();
      const dt = (now - lastTick) / 1000;
      setLastTick(now);
      setCoins(c => c + autoPerSec * multiplier * dt * (Date.now() < doubleUntil ? 2 : 1));
    }, 200);
    return () => clearInterval(tickRef.current);
  }, [autoPerSec, multiplier, lastTick, doubleUntil]);

  function handleTap(e) {
    const rect = e.currentTarget.getBoundingClientRect();
    const px = e.clientX - rect.left;
    const py = e.clientY - rect.top;
    const id = Date.now() + Math.random();
    setParticles(p => [...p.slice(-20), { id, x: px, y: py, ttl: 600 }]);
    setCoins(c => c + tapPower * multiplier * (Date.now() < doubleUntil ? 2 : 1));
  }

  useEffect(() => {
    if (!particles.length) return;
    const iv = setInterval(() => {
      setParticles(ps => ps.map(p => ({...p, ttl: p.ttl - 100})).filter(p => p.ttl > 0));
    }, 100);
    return () => clearInterval(iv);
  }, [particles]);

  function buyShop(item) {
    const existingCount = Math.floor(getUpgradeLevel(item.id));
    const cost = Math.ceil(item.baseCost * Math.pow(1.7, existingCount));
    if (coins >= cost) {
      setCoins(c => c - cost);
      item.effect();
      incrementUpgradeLevel(item.id);
    }
  }

  function getUpgradeLevel(id) {
    const raw = localStorage.getItem('idle_upgrades_v2') || '{}';
    const obj = JSON.parse(raw);
    return obj[id] || 0;
  }
  function incrementUpgradeLevel(id) {
    const raw = localStorage.getItem('idle_upgrades_v2') || '{}';
    const obj = JSON.parse(raw);
    obj[id] = (obj[id] || 0) + 1;
    localStorage.setItem('idle_upgrades_v2', JSON.stringify(obj));
  }

  function prestige() {
    const gained = Math.floor(Math.sqrt(coins / 1000));
    if (gained <= 0) return;
    setPrestigePts(p => p + gained);
    setCoins(0);
    setTapPower(1 + Math.floor(prestigePts / 5));
    setAutoPerSec(0);
    setMultiplier(1 + prestigePts * 0.05);
    localStorage.removeItem('idle_upgrades_v2');
  }

  function watchRewarded() {
    setDoubleUntil(Date.now() + 2 * 60 * 1000);
  }

  function purchaseNoAds() { setNoAds(true); }

  function computeCost(item) {
    const existingCount = Math.floor(getUpgradeLevel(item.id));
    return Math.ceil(item.baseCost * Math.pow(1.7, existingCount));
  }

  // Login stub
  function handleLogin() {
    if (userEmail.trim()) {
      setLoggedIn(true);
      // fake leaderboard update
      const sampleLB = [
        { email: 'player1@example.com', score: 12000 },
        { email: 'player2@example.com', score: 8000 },
        { email: userEmail, score: Math.floor(coins) },
        { email: 'player3@example.com', score: 5000 }
      ].sort((a,b)=>b.score-a.score);
      setLeaderboard(sampleLB);
    }
  }

  // Determine coin asset based on prestige
  function coinSVG() {
    if (prestigePts < 5) {
      return <circle cx="100" cy="100" r="80" fill="gold" stroke="#6b3f00" strokeWidth="6" />;
    } else if (prestigePts < 15) {
      return <circle cx="100" cy="100" r="80" fill="silver" stroke="#444" strokeWidth="6" />;
    } else if (prestigePts < 30) {
      return <circle cx="100" cy="100" r="80" fill="gold" stroke="#d4af37" strokeWidth="6" />;
    } else {
      return <circle cx="100" cy="100" r="80" fill="url(#diamond)" stroke="#0af" strokeWidth="6" />;
    }
  }

  if (!loggedIn) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-blue-100 to-yellow-100">
        <div className="bg-white shadow-lg rounded-xl p-6 w-80 text-center">
          <h1 className="font-bold text-xl mb-4">Login</h1>
          <input type="email" placeholder="Enter email" value={userEmail} onChange={e=>setUserEmail(e.target.value)} className="border w-full px-3 py-2 rounded mb-3" />
          <button onClick={handleLogin} className="w-full py-2 rounded bg-indigo-600 text-white">Login</button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-yellow-50 flex flex-col items-center p-4">
      <div className="w-full max-w-3xl mb-4">
        <div className={`h-16 rounded-lg flex items-center justify-center border-2 border-dashed ${noAds ? 'opacity-30' : ''}`}>
          {noAds ? <div className="text-sm">Ads removed</div> : <div className="text-sm">Top Banner Ad Placeholder</div>}
        </div>
      </div>

      <div className="w-full max-w-3xl bg-white rounded-2xl shadow-lg p-6 grid grid-cols-12 gap-4">
        <div className="col-span-7 flex flex-col items-center justify-center">
          <div className="text-center mb-3">
            <div className="text-xs text-gray-500">Coins</div>
            <div className="text-3xl font-extrabold">{formatNumber(Math.floor(coins))}</div>
            <div className="text-sm text-gray-600">Tap: {formatNumber(tapPower * multiplier)} â€¢ Auto/s: {formatNumber(autoPerSec * multiplier)}</div>
            <div className="text-xs text-gray-500">Logged in as: {userEmail}</div>
          </div>

          <div onClick={handleTap} className="relative w-64 h-64 rounded-full flex items-center justify-center cursor-pointer select-none transform active:scale-95 transition-transform" style={{ background: 'radial-gradient(circle at 30% 30%, #fff,#eee)' }}>
            <svg width="200" height="200" viewBox="0 0 200 200">
              {coinSVG()}
              <defs>
                <radialGradient id="diamond" cx="50%" cy="50%">
                  <stop offset="0%" stopColor="#e0f7fa" />
                  <stop offset="100%" stopColor="#80deea" />
                </radialGradient>
              </defs>
            </svg>
            {particles.map(p => (
              <div key={p.id} style={{ position: 'absolute', left: p.x - 8, top: p.y - 8, pointerEvents: 'none', opacity: Math.max(0, p.ttl / 600) }}>
                <div className="w-4 h-4 rounded-full shadow-sm" style={{ background: 'linear-gradient(45deg,#fff,#ffd54b)' }} />
              </div>
            ))}
          </div>

          <div className="flex gap-3 mt-4">
            <button className="px-3 py-2 rounded-lg bg-blue-500 text-white" onClick={watchRewarded}>Watch Rewarded (2m x2)</button>
            <button className="px-3 py-2 rounded-lg border" onClick={prestige}>Prestige</button>
          </div>
        </div>

        <div className="col-span-5">
          <div className="mb-4">
            <div className="text-sm text-gray-500">Shop</div>
            <div className="grid grid-cols-1 gap-3 mt-2">
              {shop.map(item => (
                <div key={item.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-semibold">{item.name}</div>
                    <div className="text-xs text-gray-500">Level: {getUpgradeLevel(item.id)}</div>
                  </div>
                  <div className="flex flex-col items-end">
                    <div className="text-sm font-bold">{formatNumber(computeCost(item))}</div>
                    <button className="mt-2 px-3 py-1 text-xs rounded bg-green-500 text-white" onClick={() => buyShop(item)}>Buy</button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="mb-4 p-3 bg-yellow-50 rounded-lg">
            <div className="text-sm text-gray-700">Prestige Points: <span className="font-bold">{prestigePts}</span></div>
          </div>

          <div className="p-3 bg-white rounded-lg border mb-4">
            <div className="text-sm font-semibold mb-2">Settings</div>
            <div className="flex items-center justify-between mb-2">
              <div className="text-xs text-gray-600">Remove Ads</div>
              {noAds ? (
                <div className="text-sm text-green-600">Purchased</div>
              ) : (
                <button className="px-3 py-1 rounded bg-indigo-600 text-white text-sm" onClick={purchaseNoAds}>Buy $1.99</button>
              )}
            </div>
          </div>

          <div className="p-3 bg-gray-50 rounded-lg">
            <div className="text-sm font-semibold mb-2">Leaderboard</div>
            {leaderboard.map((p,i) => (
              <div key={i} className={`flex justify-between text-sm ${p.email===userEmail?'font-bold text-blue-600':''}`}>
                <div>{i+1}. {p.email}</div>
                <div>{formatNumber(p.score)}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="col-span-12 mt-4 text-xs text-gray-500">Prototype v2 â€¢ Ads placeholders only â€¢ Login + Leaderboard simulated</div>
      </div>

      <div className="w-full max-w-3xl mt-4">
        <div className={`h-16 rounded-lg flex items-center justify-center border-2 border-dashed ${noAds ? 'opacity-30' : ''}`}>
          {noAds ? <div className="text-sm">Ads removed</div> : <div className="text-sm">Bottom Banner Ad Placeholder</div>}
        </div>
      </div>
    </div>
  );
}
// Idle Clicker Prototype (React) with Advanced UI
// Features added:
// - Email login system (stubbed, stores locally)
// - Local leaderboard simulation (shows top players and logged-in player)
// - HD SVG tappable asset (coin with sparkle)
// - Prestige visual evolution (bronze, silver, gold, diamond)
// - Shop, ads, prestige, rewarded ad still intact

import React, { useEffect, useState, useRef } from 'react';

function formatNumber(n) {
  if (n < 1000) return n.toString();
  const units = ['K','M','B','T','Qa','Qi'];
  let i = -1;
  let num = n;
  while (num >= 1000 && i < units.length - 1) {
    num /= 1000;
    i += 1;
  }
  return num.toFixed(num < 10 ? 2 : 1) + units[i];
}

export default function IdleClickerAdvanced() {
  const [coins, setCoins] = useState(0);
  const [tapPower, setTapPower] = useState(1);
  const [autoPerSec, setAutoPerSec] = useState(0);
  const [multiplier, setMultiplier] = useState(1);
  const [prestigePts, setPrestigePts] = useState(0);
  const [noAds, setNoAds] = useState(false);
  const [doubleUntil, setDoubleUntil] = useState(0);
  const [lastTick, setLastTick] = useState(Date.now());
  const [particles, setParticles] = useState([]);
  const [userEmail, setUserEmail] = useState("");
  const [loggedIn, setLoggedIn] = useState(false);
  const [leaderboard, setLeaderboard] = useState([]);
  const tickRef = useRef(null);

  const shop = [
    { id: 'tap_up', name: 'Tap Power +1', baseCost: 10, effect: () => setTapPower(p => p + 1) },
    { id: 'auto_1', name: 'Auto Clicker', baseCost: 50, effect: () => setAutoPerSec(p => p + 1) },
    { id: 'mult_x2', name: 'Multiplier x2', baseCost: 500, effect: () => setMultiplier(m => m * 2) },
  ];

  // Load saved data
  useEffect(() => {
    const raw = localStorage.getItem('idle_proto_v2');
    if (raw) {
      try {
        const s = JSON.parse(raw);
        setCoins(s.coins || 0);
        setTapPower(s.tapPower || 1);
        setAutoPerSec(s.autoPerSec || 0);
        setMultiplier(s.multiplier || 1);
        setPrestigePts(s.prestigePts || 0);
        setNoAds(!!s.noAds);
        if (s.email) { setUserEmail(s.email); setLoggedIn(true); }
      } catch(e){}
    }
  }, []);
  useEffect(() => {
    const to = setInterval(() => {
      const state = { coins, tapPower, autoPerSec, multiplier, prestigePts, noAds, email: userEmail };
      localStorage.setItem('idle_proto_v2', JSON.stringify(state));
    }, 5000);
    return () => clearInterval(to);
  }, [coins, tapPower, autoPerSec, multiplier, prestigePts, noAds, userEmail]);

  // Income tick
  useEffect(() => {
    tickRef.current = setInterval(() => {
      const now = Date.now();
      const dt = (now - lastTick) / 1000;
      setLastTick(now);
      setCoins(c => c + autoPerSec * multiplier * dt * (Date.now() < doubleUntil ? 2 : 1));
    }, 200);
    return () => clearInterval(tickRef.current);
  }, [autoPerSec, multiplier, lastTick, doubleUntil]);

  function handleTap(e) {
    const rect = e.currentTarget.getBoundingClientRect();
    const px = e.clientX - rect.left;
    const py = e.clientY - rect.top;
    const id = Date.now() + Math.random();
    setParticles(p => [...p.slice(-20), { id, x: px, y: py, ttl: 600 }]);
    setCoins(c => c + tapPower * multiplier * (Date.now() < doubleUntil ? 2 : 1));
  }

  useEffect(() => {
    if (!particles.length) return;
    const iv = setInterval(() => {
      setParticles(ps => ps.map(p => ({...p, ttl: p.ttl - 100})).filter(p => p.ttl > 0));
    }, 100);
    return () => clearInterval(iv);
  }, [particles]);

  function buyShop(item) {
    const existingCount = Math.floor(getUpgradeLevel(item.id));
    const cost = Math.ceil(item.baseCost * Math.pow(1.7, existingCount));
    if (coins >= cost) {
      setCoins(c => c - cost);
      item.effect();
      incrementUpgradeLevel(item.id);
    }
  }

  function getUpgradeLevel(id) {
    const raw = localStorage.getItem('idle_upgrades_v2') || '{}';
    const obj = JSON.parse(raw);
    return obj[id] || 0;
  }
  function incrementUpgradeLevel(id) {
    const raw = localStorage.getItem('idle_upgrades_v2') || '{}';
    const obj = JSON.parse(raw);
    obj[id] = (obj[id] || 0) + 1;
    localStorage.setItem('idle_upgrades_v2', JSON.stringify(obj));
  }

  function prestige() {
    const gained = Math.floor(Math.sqrt(coins / 1000));
    if (gained <= 0) return;
    setPrestigePts(p => p + gained);
    setCoins(0);
    setTapPower(1 + Math.floor(prestigePts / 5));
    setAutoPerSec(0);
    setMultiplier(1 + prestigePts * 0.05);
    localStorage.removeItem('idle_upgrades_v2');
  }

  function watchRewarded() {
    setDoubleUntil(Date.now() + 2 * 60 * 1000);
  }

  function purchaseNoAds() { setNoAds(true); }

  function computeCost(item) {
    const existingCount = Math.floor(getUpgradeLevel(item.id));
    return Math.ceil(item.baseCost * Math.pow(1.7, existingCount));
  }

  // Login stub
  function handleLogin() {
    if (userEmail.trim()) {
      setLoggedIn(true);
      // fake leaderboard update
      const sampleLB = [
        { email: 'player1@example.com', score: 12000 },
        { email: 'player2@example.com', score: 8000 },
        { email: userEmail, score: Math.floor(coins) },
        { email: 'player3@example.com', score: 5000 }
      ].sort((a,b)=>b.score-a.score);
      setLeaderboard(sampleLB);
    }
  }

  // Determine coin asset based on prestige
  function coinSVG() {
    if (prestigePts < 5) {
      return <circle cx="100" cy="100" r="80" fill="gold" stroke="#6b3f00" strokeWidth="6" />;
    } else if (prestigePts < 15) {
      return <circle cx="100" cy="100" r="80" fill="silver" stroke="#444" strokeWidth="6" />;
    } else if (prestigePts < 30) {
      return <circle cx="100" cy="100" r="80" fill="gold" stroke="#d4af37" strokeWidth="6" />;
    } else {
      return <circle cx="100" cy="100" r="80" fill="url(#diamond)" stroke="#0af" strokeWidth="6" />;
    }
  }

  if (!loggedIn) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-blue-100 to-yellow-100">
        <div className="bg-white shadow-lg rounded-xl p-6 w-80 text-center">
          <h1 className="font-bold text-xl mb-4">Login</h1>
          <input type="email" placeholder="Enter email" value={userEmail} onChange={e=>setUserEmail(e.target.value)} className="border w-full px-3 py-2 rounded mb-3" />
          <button onClick={handleLogin} className="w-full py-2 rounded bg-indigo-600 text-white">Login</button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-yellow-50 flex flex-col items-center p-4">
      <div className="w-full max-w-3xl mb-4">
        <div className={`h-16 rounded-lg flex items-center justify-center border-2 border-dashed ${noAds ? 'opacity-30' : ''}`}>
          {noAds ? <div className="text-sm">Ads removed</div> : <div className="text-sm">Top Banner Ad Placeholder</div>}
        </div>
      </div>

      <div className="w-full max-w-3xl bg-white rounded-2xl shadow-lg p-6 grid grid-cols-12 gap-4">
        <div className="col-span-7 flex flex-col items-center justify-center">
          <div className="text-center mb-3">
            <div className="text-xs text-gray-500">Coins</div>
            <div className="text-3xl font-extrabold">{formatNumber(Math.floor(coins))}</div>
            <div className="text-sm text-gray-600">Tap: {formatNumber(tapPower * multiplier)} â€¢ Auto/s: {formatNumber(autoPerSec * multiplier)}</div>
            <div className="text-xs text-gray-500">Logged in as: {userEmail}</div>
          </div>

          <div onClick={handleTap} className="relative w-64 h-64 rounded-full flex items-center justify-center cursor-pointer select-none transform active:scale-95 transition-transform" style={{ background: 'radial-gradient(circle at 30% 30%, #fff,#eee)' }}>
            <svg width="200" height="200" viewBox="0 0 200 200">
              {coinSVG()}
              <defs>
                <radialGradient id="diamond" cx="50%" cy="50%">
                  <stop offset="0%" stopColor="#e0f7fa" />
                  <stop offset="100%" stopColor="#80deea" />
                </radialGradient>
              </defs>
            </svg>
            {particles.map(p => (
              <div key={p.id} style={{ position: 'absolute', left: p.x - 8, top: p.y - 8, pointerEvents: 'none', opacity: Math.max(0, p.ttl / 600) }}>
                <div className="w-4 h-4 rounded-full shadow-sm" style={{ background: 'linear-gradient(45deg,#fff,#ffd54b)' }} />
              </div>
            ))}
          </div>

          <div className="flex gap-3 mt-4">
            <button className="px-3 py-2 rounded-lg bg-blue-500 text-white" onClick={watchRewarded}>Watch Rewarded (2m x2)</button>
            <button className="px-3 py-2 rounded-lg border" onClick={prestige}>Prestige</button>
          </div>
        </div>

        <div className="col-span-5">
          <div className="mb-4">
            <div className="text-sm text-gray-500">Shop</div>
            <div className="grid grid-cols-1 gap-3 mt-2">
              {shop.map(item => (
                <div key={item.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div>
                    <div className="font-semibold">{item.name}</div>
                    <div className="text-xs text-gray-500">Level: {getUpgradeLevel(item.id)}</div>
                  </div>
                  <div className="flex flex-col items-end">
                    <div className="text-sm font-bold">{formatNumber(computeCost(item))}</div>
                    <button className="mt-2 px-3 py-1 text-xs rounded bg-green-500 text-white" onClick={() => buyShop(item)}>Buy</button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="mb-4 p-3 bg-yellow-50 rounded-lg">
            <div className="text-sm text-gray-700">Prestige Points: <span className="font-bold">{prestigePts}</span></div>
          </div>

          <div className="p-3 bg-white rounded-lg border mb-4">
            <div className="text-sm font-semibold mb-2">Settings</div>
            <div className="flex items-center justify-between mb-2">
              <div className="text-xs text-gray-600">Remove Ads</div>
              {noAds ? (
                <div className="text-sm text-green-600">Purchased</div>
              ) : (
                <button className="px-3 py-1 rounded bg-indigo-600 text-white text-sm" onClick={purchaseNoAds}>Buy $1.99</button>
              )}
            </div>
          </div>

          <div className="p-3 bg-gray-50 rounded-lg">
            <div className="text-sm font-semibold mb-2">Leaderboard</div>
            {leaderboard.map((p,i) => (
              <div key={i} className={`flex justify-between text-sm ${p.email===userEmail?'font-bold text-blue-600':''}`}>
                <div>{i+1}. {p.email}</div>
                <div>{formatNumber(p.score)}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="col-span-12 mt-4 text-xs text-gray-500">Prototype v2 â€¢ Ads placeholders only â€¢ Login + Leaderboard simulated</div>
      </div>

      <div className="w-full max-w-3xl mt-4">
        <div className={`h-16 rounded-lg flex items-center justify-center border-2 border-dashed ${noAds ? 'opacity-30' : ''}`}>
          {noAds ? <div className="text-sm">Ads removed</div> : <div className="text-sm">Bottom Banner Ad Placeholder</div>}
        </div>
      </div>
    </div>
  );
}
